# References:
# http://doc.sagemath.org/html/en/reference/curves/sage/schemes/elliptic_curves/ell_curve_isogeny.html
# http://www.math.uwaterloo.ca/~mrubinst/modularpolynomials/phi_l.html
# https://math.mit.edu/~drew/ClassicalModPolys.html
# https://eprint.iacr.org/2006/145.pdf
q = 83
FF = GF(q)
RR.<x> = PolynomialRing(FF)

def printgroupmorphism(EE):
    listpoints =  EE.points()
    for PP in listpoints:
        print PP, PP.order(), phi(PP), phi(PP).order()

def modular3(X, Y):
    """ from Kohel's thesis, Psi function  """
    return (X+Y)^4 - X^3*Y^3 + 2232*X^2*Y^2*(X+Y)+36864000*(X+Y)^3 - 1069960*X*Y*(X + Y)^2 + 2590058000*X^2*Y^2 + 8900112384000*X*Y*( X + Y ) + 452984832000000*(X + Y)^2 - 771751936000000000*X*Y + 1855425871872000000000*(X + Y)

def modular5(X, Y):
    """ X_0(5) from BLS  """
    return 141359947154721358697753474691071362751004672000 + 53274330803424425450420160273356509151232000*(X+Y) - 264073457076620596259715790247978782949376*X*Y + 6692500042627997708487149415015068467200*(X^2+Y^2) +  36554736583949629295706472332656640000*(X^2*Y+X*Y^2) + 5110941777552418083110765199360000*(X^2*Y^2) +  280244777828439527804321565297868800*(X^3 + Y^3) -192457934618928299655108231168000*(X^3*Y+X*Y^3) + 26898488858380731577417728000*(X^3*Y^2+X^2*Y^3) - 441206965512914835246100*X^3*Y^3 + 1284733132841424456253440*(X^4 + Y^4) + 128541798906828816384000*(X^4*Y+X*Y^4) + 383083609779811215375*(X^4*Y^2+X^2*Y^4)+ 107878928185336800*(X^4*Y^3+X^3*Y^4) + 1665999364600*X^4*Y^4 + 1963211489280*(X^5 + Y^5) - 246683410950*(X^5*Y+X*Y^5) + 2028551200*(X^5*Y^2+X^2*Y^5) -4550940*(X^5*Y^3+X^3*Y^5) + 3720*(X^5*Y^4+X^4*Y^5) - X^5*Y^5 + (X^6+Y^6)

#print modular3(RRR(11), RRR(6))

PHI2 = [[3, 0, 1], [0, 3, 1], [2, 0, -162000], [0, 2, -162000], [2, 1, 1488], [1, 2, 1488], [2, 2, -1], [1, 0, 8748000000], [0, 1, 8748000000], [1, 1, 40773375], [0, 0, -157464000000000]]
PHI3 = [[1, 0, 1855425871872000000000L], [0, 1, 1855425871872000000000L], [1, 1, -770845966336000000], [2, 0, 452984832000000], [0, 2, 452984832000000], [2, 1, 8900222976000], [1, 2, 8900222976000], [2, 2, 2587918086], [3, 0, 36864000], [0, 3, 36864000], [3, 1, -1069956], [1, 3, -1069956], [3, 2, 2232], [2, 3, 2232], [3, 3, -1], [4, 0, 1], [0, 4, 1]]
PHI4 = [[0, 0, 280949374722195372109640625000000000000L], [1, 0, -364936327796757658404375000000000000L], [0, 1, -364936327796757658404375000000000000L], [1, 1, -94266583063223403127324218750000L], [2, 0, 158010236947953767724187500000000L], [0, 2, 158010236947953767724187500000000L], [2, 1, 188656639464998455284287109375L], [1, 2, 188656639464998455284287109375L], [2, 2, 26402314839969410496000000L], [3, 0, -22805180351548032195000000000L], [0, 3, -22805180351548032195000000000L], [3, 1, 12519806366846423598750000L], [1, 3, 12519806366846423598750000L], [3, 2, -914362550706103200000L], [2, 3, -914362550706103200000L], [3, 3, 2729942049541120], [4, 0, 24125474716854750000L], [0, 4, 24125474716854750000L], [4, 1, 1194227244109980000], [1, 4, 1194227244109980000], [4, 2, 1425220456750080], [2, 4, 1425220456750080], [4, 3, 80967606480], [3, 4, 80967606480], [4, 4, 7440], [5, 0, -8507430000], [0, 5, -8507430000], [5, 1, 561444609], [1, 5, 561444609], [5, 2, -2533680], [2, 5, -2533680], [5, 3, 2976], [3, 5, 2976], [5, 4, -1], [4, 5, -1], [6, 0, 1], [0, 6, 1]]
PHI5 = [[0, 0, 141359947154721358697753474691071362751004672000L], [1, 0, 53274330803424425450420160273356509151232000L], [0, 1, 53274330803424425450420160273356509151232000L], [1, 1, -264073457076620596259715790247978782949376L], [2, 0, 6692500042627997708487149415015068467200L], [0, 2, 6692500042627997708487149415015068467200L], [2, 1, 36554736583949629295706472332656640000L], [1, 2, 36554736583949629295706472332656640000L], [2, 2, 5110941777552418083110765199360000L], [3, 0, 280244777828439527804321565297868800L], [0, 3, 280244777828439527804321565297868800L], [3, 1, -192457934618928299655108231168000L], [1, 3, -192457934618928299655108231168000L], [3, 2, 26898488858380731577417728000L], [2, 3, 26898488858380731577417728000L], [3, 3, -441206965512914835246100L], [4, 0, 1284733132841424456253440L], [0, 4, 1284733132841424456253440L], [4, 1, 128541798906828816384000L], [1, 4, 128541798906828816384000L], [4, 2, 383083609779811215375L], [2, 4, 383083609779811215375L], [4, 3, 107878928185336800], [3, 4, 107878928185336800], [4, 4, 1665999364600], [5, 0, 1963211489280], [0, 5, 1963211489280], [5, 1, -246683410950], [1, 5, -246683410950], [5, 2, 2028551200], [2, 5, 2028551200], [5, 3, -4550940], [3, 5, -4550940], [5, 4, 3720], [4, 5, 3720], [5, 5, -1], [6, 0, 1], [0, 6, 1]]

PHI = [ [], [], PHI2, PHI3, PHI4, PHI5  ]

TOOLONG = 200   # define the largest length of the loop

def Phieval(N, i, j, m):
    """ eval PHI_N(i,j) mod m  """
    v = 0
    for monomial in PHI[N]:
        v = ( v + (i**monomial[0]) * (j**monomial[1]) * (monomial[2]%m)  )%m
    return v

def onesidephi(N, i):
    """ input, N, i, output the polynomial f(y) = PHI_N(i,y)  """
    f = 0
    for monomial in PHI[N]:
        f = f + (i**monomial[0])*monomial[2]* x^monomial[1]
    return f.roots()

S = [15, 48, 23, 29, 34, 55, 71]

def check_connectivity():
    """ enumerate all the j variants, to see if they are connected """
    for j1 in FF:
        for j2 in FF:
            rc3 = modular3(j1, j2)
            if rc3==0:
                print j1, j2, "3"
            rc5 = modular5(j1, j2)
            if rc5==0:
                print j1, j2, "5"

#check_connectivity()

def finddots():
    """ identify curves in specific isogeny classes """
    possiblejv = []
    for A in xrange(0,q):
        for B in xrange(0,q):
            try:
                E1 = EllipticCurve(RRR, [0,0,0,A,B])
                #print E1.j_invariant()
                if E1.count_points(1)==93:
                    if E1.j_invariant() not in possiblejv:
                        possiblejv.append(E1.j_invariant())
                    #print "E1:", E1, "j(E1):", E1.j_invariant(), "#(E1)=", E1.count_points(1)
            except (ArithmeticError):
                continue
    print possiblejv

finddots()
