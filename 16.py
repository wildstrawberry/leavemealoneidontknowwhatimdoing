# References:
# http://doc.sagemath.org/html/en/reference/curves/sage/schemes/elliptic_curves/ell_curve_isogeny.html
# http://www.math.uwaterloo.ca/~mrubinst/modularpolynomials/phi_l.html
# https://math.mit.edu/~drew/ClassicalModPolys.html

PHI2 = [[3, 0, 1], [0, 3, 1], [2, 0, -162000], [0, 2, -162000], [2, 1, 1488], [1, 2, 1488], [2, 2, -1], [1, 0, 8748000000], [0, 1, 8748000000], [1, 1, 40773375], [0, 0, -157464000000000]]
PHI3 = [[1, 0, 1855425871872000000000L], [0, 1, 1855425871872000000000L], [1, 1, -770845966336000000], [2, 0, 452984832000000], [0, 2, 452984832000000], [2, 1, 8900222976000], [1, 2, 8900222976000], [2, 2, 2587918086], [3, 0, 36864000], [0, 3, 36864000], [3, 1, -1069956], [1, 3, -1069956], [3, 2, 2232], [2, 3, 2232], [3, 3, -1], [4, 0, 1], [0, 4, 1]]
PHI4 = [[0, 0, 280949374722195372109640625000000000000L], [1, 0, -364936327796757658404375000000000000L], [0, 1, -364936327796757658404375000000000000L], [1, 1, -94266583063223403127324218750000L], [2, 0, 158010236947953767724187500000000L], [0, 2, 158010236947953767724187500000000L], [2, 1, 188656639464998455284287109375L], [1, 2, 188656639464998455284287109375L], [2, 2, 26402314839969410496000000L], [3, 0, -22805180351548032195000000000L], [0, 3, -22805180351548032195000000000L], [3, 1, 12519806366846423598750000L], [1, 3, 12519806366846423598750000L], [3, 2, -914362550706103200000L], [2, 3, -914362550706103200000L], [3, 3, 2729942049541120], [4, 0, 24125474716854750000L], [0, 4, 24125474716854750000L], [4, 1, 1194227244109980000], [1, 4, 1194227244109980000], [4, 2, 1425220456750080], [2, 4, 1425220456750080], [4, 3, 80967606480], [3, 4, 80967606480], [4, 4, 7440], [5, 0, -8507430000], [0, 5, -8507430000], [5, 1, 561444609], [1, 5, 561444609], [5, 2, -2533680], [2, 5, -2533680], [5, 3, 2976], [3, 5, 2976], [5, 4, -1], [4, 5, -1], [6, 0, 1], [0, 6, 1]]
PHI5 = [[0, 0, 141359947154721358697753474691071362751004672000L], [1, 0, 53274330803424425450420160273356509151232000L], [0, 1, 53274330803424425450420160273356509151232000L], [1, 1, -264073457076620596259715790247978782949376L], [2, 0, 6692500042627997708487149415015068467200L], [0, 2, 6692500042627997708487149415015068467200L], [2, 1, 36554736583949629295706472332656640000L], [1, 2, 36554736583949629295706472332656640000L], [2, 2, 5110941777552418083110765199360000L], [3, 0, 280244777828439527804321565297868800L], [0, 3, 280244777828439527804321565297868800L], [3, 1, -192457934618928299655108231168000L], [1, 3, -192457934618928299655108231168000L], [3, 2, 26898488858380731577417728000L], [2, 3, 26898488858380731577417728000L], [3, 3, -441206965512914835246100L], [4, 0, 1284733132841424456253440L], [0, 4, 1284733132841424456253440L], [4, 1, 128541798906828816384000L], [1, 4, 128541798906828816384000L], [4, 2, 383083609779811215375L], [2, 4, 383083609779811215375L], [4, 3, 107878928185336800], [3, 4, 107878928185336800], [4, 4, 1665999364600], [5, 0, 1963211489280], [0, 5, 1963211489280], [5, 1, -246683410950], [1, 5, -246683410950], [5, 2, 2028551200], [2, 5, 2028551200], [5, 3, -4550940], [3, 5, -4550940], [5, 4, 3720], [4, 5, 3720], [5, 5, -1], [6, 0, 1], [0, 6, 1]]
PHI8 = [[0, 0, -1259925064698459799223870370866254232997822186002533976842071309339735925197601318359375000000000000L], [1, 0, 2891839411497627131864081904337317750674739994298397567849174351077751159667968750000000000000000L], [0, 1, 2891839411497627131864081904337317750674739994298397567849174351077751159667968750000000000000000L], [1, 1, 2222592169609618219995787547134709357565266268801614503256744396071029424667358398437500000000L], [2, 0, -2157532429308712796753556204385361158814551813290465577110708455187618255615234375000000000000L], [0, 2, -2157532429308712796753556204385361158814551813290465577110708455187618255615234375000000000000L], [2, 1, 516308374803110838638659999405519338497474900982794222527833515514402508735656738281250000L], [1, 2, 516308374803110838638659999405519338497474900982794222527833515514402508735656738281250000L], [2, 2, 3725235359636503558942212079708664298764959135440105516280571956112558305263519287109375L], [3, 0, 480116556126375138152841619131574497402315665404209573819748022117980957031250000000000000L], [0, 3, 480116556126375138152841619131574497402315665404209573819748022117980957031250000000000000L], [3, 1, -1660321192693227574844848968729153843054260863533998508845902825802129745483398437500000L], [1, 3, -1660321192693227574844848968729153843054260863533998508845902825802129745483398437500000L], [3, 2, -180187867398017248979248512290476440437804697190448382078667604981986999511718750000L], [2, 3, -180187867398017248979248512290476440437804697190448382078667604981986999511718750000L], [3, 3, 514412843489863383885140208366393136625819618578482852539811297995693206787109375L], [4, 0, 31416454275234648874953631203995398210443714790314226515860018167282104492187500000000L], [0, 4, 31416454275234648874953631203995398210443714790314226515860018167282104492187500000000L], [4, 1, 197341821381144808428553462138368655657948148568332557867868947754838466644287109375L], [1, 4, 197341821381144808428553462138368655657948148568332557867868947754838466644287109375L], [4, 2, -171814306202718601104750178540188729369959951617634891819452256718750000000000000L], [2, 4, -171814306202718601104750178540188729369959951617634891819452256718750000000000000L], [4, 3, -485019607819528510708464720651503124596992222087849252905536671875000000000L], [3, 4, -485019607819528510708464720651503124596992222087849252905536671875000000000L], [4, 4, 18786759935602370938673325678523612553387264307397640563787520000000000000L], [5, 0, 595825152573532717681742774613562895021657059432138982517591082031250000000000000L], [0, 5, 595825152573532717681742774613562895021657059432138982517591082031250000000000000L], [5, 1, -6349751374971005289736100899431308044091500334628882902557771590820312500000000L], [1, 5, -6349751374971005289736100899431308044091500334628882902557771590820312500000000L], [5, 2, 12881110445570129309840247898262922529202613272198956897832531929687500000000L], [2, 5, 12881110445570129309840247898262922529202613272198956897832531929687500000000L], [5, 3, -7159361225727255099580660194139288935142034608202996654063769363281250000L], [3, 5, -7159361225727255099580660194139288935142034608202996654063769363281250000L], [5, 4, 586851812441362334135935858135253832185791776377575605392160000000000L], [4, 5, 586851812441362334135935858135253832185791776377575605392160000000000L], [5, 5, 179073003539689758693063089394235367959949410734680662874748000000L], [6, 0, 3247567518999520983872420401268621520947254617244800358391830078125000000000L], [0, 6, 3247567518999520983872420401268621520947254617244800358391830078125000000000L], [6, 1, 20755545175692883198705158943161836698838403748243809872370452636718750000L], [1, 6, 20755545175692883198705158943161836698838403748243809872370452636718750000L], [6, 2, -148184626587108044009926218600448232569326355806972766048207312500000000L], [2, 6, -148184626587108044009926218600448232569326355806972766048207312500000000L], [6, 3, 201484907087738092159596371591667667496060685697322410639311000000000L], [3, 6, 201484907087738092159596371591667667496060685697322410639311000000000L], [6, 4, -88012776667276058679280500784865763190778117829743003081664000000L], [4, 6, -88012776667276058679280500784865763190778117829743003081664000000L], [6, 5, 11217393453547600384708317483066492046225208605530019170816000L], [5, 6, 11217393453547600384708317483066492046225208605530019170816000L], [6, 6, -158810357931997071772627427499648092212547522281312839936L], [7, 0, -5790535436561105375522246013637387236262493061253916775093750000000000L], [0, 7, -5790535436561105375522246013637387236262493061253916775093750000000000L], [7, 1, 95169842605869243741101318338215633687626286235475625650062500000000L], [1, 7, 95169842605869243741101318338215633687626286235475625650062500000000L], [7, 2, -151638480005016062214845804965575910333934216555748242793281250000L], [2, 7, -151638480005016062214845804965575910333934216555748242793281250000L], [7, 3, -8748419285618665069826264533122984326821320361556770066500000L], [3, 7, -8748419285618665069826264533122984326821320361556770066500000L], [7, 4, 45558722660155460586046536161586100880704478742904799328000L], [4, 7, 45558722660155460586046536161586100880704478742904799328000L], [7, 5, 6326461442324163523315472945027012513915182432491720192L], [5, 7, 6326461442324163523315472945027012513915182432491720192L], [7, 6, 99062886301871418348536632217934601106741283319296L], [6, 7, 99062886301871418348536632217934601106741283319296L], [7, 7, 128832296974596434638347792832163581557703680L], [8, 0, 3047054822782089668624459078493314595043379945913102761718750000L], [0, 8, 3047054822782089668624459078493314595043379945913102761718750000L], [8, 1, 62455076971567640336206139739710791896041377577085845437500000L], [1, 8, 62455076971567640336206139739710791896041377577085845437500000L], [8, 2, 53932199568426798590055832950935931409868044087302336000000L], [2, 8, 53932199568426798590055832950935931409868044087302336000000L], [8, 3, 7343194937088187841588966452429375207832749588209432000L], [3, 8, 7343194937088187841588966452429375207832749588209432000L], [8, 4, -133546312118278441290258919004988971154285533306880L], [4, 8, -133546312118278441290258919004988971154285533306880L], [8, 5, 24939018056549353391282658184625378179180460544L], [5, 8, 24939018056549353391282658184625378179180460544L], [8, 6, -803725309258024030994698637263251353077248L], [6, 8, -803725309258024030994698637263251353077248L], [8, 7, 4745830567628632761856422904569076944L], [7, 8, 4745830567628632761856422904569076944L], [8, 8, -2041437039412434917208653134080L], [9, 0, -520067808058909220014353176629134712264772393194500000000L], [0, 9, -520067808058909220014353176629134712264772393194500000000L], [9, 1, 571459463835995161506183399545857463051290669929750000L], [1, 9, 571459463835995161506183399545857463051290669929750000L], [9, 2, -197521541942677134523793158505822047314560052072000L], [2, 9, -197521541942677134523793158505822047314560052072000L], [9, 3, 23623974295654813377158727217379732833898137345L], [3, 9, 23623974295654813377158727217379732833898137345L], [9, 4, -796676135899570817558402872509493997309184L], [4, 9, -796676135899570817558402872509493997309184L], [9, 5, 4743317837265062468423755822048356048L], [5, 9, 4743317837265062468423755822048356048L], [9, 6, -329632585376759146098794797312L], [6, 9, -329632585376759146098794797312L], [9, 7, 254280573881435286102744480L], [7, 9, 254280573881435286102744480L], [9, 8, 4723467116054155221168L], [8, 9, 4723467116054155221168L], [9, 9, 3211926994906879], [10, 0, 194011691774389784775766162623440250000L], [0, 10, 194011691774389784775766162623440250000L], [10, 1, 83443317610534187375785190080819514625L], [1, 10, 83443317610534187375785190080819514625L], [10, 2, 1365311867479274977245656739956703216L], [2, 10, 1365311867479274977245656739956703216L], [10, 3, 3608183328359975892089596589727744L], [3, 10, 3608183328359975892089596589727744L], [10, 4, 2099876382840529140905107362048L], [4, 10, 2099876382840529140905107362048L], [10, 5, 261310970398725793350382848L], [5, 10, 261310970398725793350382848L], [10, 6, 4728246427151406262992L], [6, 10, 4728246427151406262992L], [10, 7, 3211964917645312], [7, 10, 3211964917645312], [10, 8, -22932096], [8, 10, -22932096], [10, 9, 7440], [9, 10, 7440], [10, 10, -1], [11, 0, -24125403112135308000L], [0, 11, -24125403112135308000L], [11, 1, 11941355072680118832L], [1, 11, 11941355072680118832L], [11, 2, -355479814776346879], [2, 11, -355479814776346879], [11, 3, 2895840108006912], [3, 11, 2895840108006912], [11, 4, -9778267498800], [4, 11, -9778267498800], [11, 5, 16203352576], [5, 11, 16203352576], [11, 6, -13923936], [6, 11, -13923936], [11, 7, 5952], [7, 11, 5952], [11, 8, -1], [8, 11, -1], [12, 0, 1], [0, 12, 1]]

PHI = [ [], [], PHI2, PHI3, PHI4, PHI5, [], [], PHI8  ]

p = next_prime(100)
q = next_prime(90)
N = p*q
PP = FiniteField(p)
QQ = FiniteField(q)
NN = Integers(N)
#RR.<x> = PolynomialRing(QQ)
RR.<x> = PolynomialRing(NN)
print p, q, N

def Phieval(N, i, j, m):
    """ eval PHI_N(i,j) mod m  """
    v = 0
    for monomial in PHI[N]:
        v = ( v + (i**monomial[0]) * (j**monomial[1]) * (monomial[2]%m)  )%m
    return v

def onesidephi(N, i):
    """ input, N, i, output the polynomial f(y) = PHI_N(i,y), I don't think there's efficient algorithms mod composite numbers  """
    f = 0
    for monomial in PHI[N]:
        f = f + (i**monomial[0])*monomial[2]* x^monomial[1]
    return f   #.roots(multiplicities=False)

def lottery():
    for i in range(0,90):
        f2 = onesidephi(2, i)
        f4 = onesidephi(4, i)
        f8 = onesidephi(8, i)
        boo = f4.gcd(f2)!=1 or f8.gcd(f2)!=1 or f8.gcd(f4)!=1
        if boo==True:
            print i, f4.gcd(f2), f8.gcd(f4), f8.gcd(f2)

lottery()
