# Delfs, Galbraith. https://arxiv.org/pdf/1310.7789.pdf

PHI2 = [[3, 0, 1], [0, 3, 1], [2, 0, -162000], [0, 2, -162000], [2, 1, 1488], [1, 2, 1488], [2, 2, -1], [1, 0, 8748000000], [0, 1, 8748000000], [1, 1, 40773375], [0, 0, -157464000000000]]
PHI3 = [[1, 0, 1855425871872000000000L], [0, 1, 1855425871872000000000L], [1, 1, -770845966336000000], [2, 0, 452984832000000], [0, 2, 452984832000000], [2, 1, 8900222976000], [1, 2, 8900222976000], [2, 2, 2587918086], [3, 0, 36864000], [0, 3, 36864000], [3, 1, -1069956], [1, 3, -1069956], [3, 2, 2232], [2, 3, 2232], [3, 3, -1], [4, 0, 1], [0, 4, 1]]
PHI4 = [[0, 0, 280949374722195372109640625000000000000L], [1, 0, -364936327796757658404375000000000000L], [0, 1, -364936327796757658404375000000000000L], [1, 1, -94266583063223403127324218750000L], [2, 0, 158010236947953767724187500000000L], [0, 2, 158010236947953767724187500000000L], [2, 1, 188656639464998455284287109375L], [1, 2, 188656639464998455284287109375L], [2, 2, 26402314839969410496000000L], [3, 0, -22805180351548032195000000000L], [0, 3, -22805180351548032195000000000L], [3, 1, 12519806366846423598750000L], [1, 3, 12519806366846423598750000L], [3, 2, -914362550706103200000L], [2, 3, -914362550706103200000L], [3, 3, 2729942049541120], [4, 0, 24125474716854750000L], [0, 4, 24125474716854750000L], [4, 1, 1194227244109980000], [1, 4, 1194227244109980000], [4, 2, 1425220456750080], [2, 4, 1425220456750080], [4, 3, 80967606480], [3, 4, 80967606480], [4, 4, 7440], [5, 0, -8507430000], [0, 5, -8507430000], [5, 1, 561444609], [1, 5, 561444609], [5, 2, -2533680], [2, 5, -2533680], [5, 3, 2976], [3, 5, 2976], [5, 4, -1], [4, 5, -1], [6, 0, 1], [0, 6, 1]]
PHI5 = [[0, 0, 141359947154721358697753474691071362751004672000L], [1, 0, 53274330803424425450420160273356509151232000L], [0, 1, 53274330803424425450420160273356509151232000L], [1, 1, -264073457076620596259715790247978782949376L], [2, 0, 6692500042627997708487149415015068467200L], [0, 2, 6692500042627997708487149415015068467200L], [2, 1, 36554736583949629295706472332656640000L], [1, 2, 36554736583949629295706472332656640000L], [2, 2, 5110941777552418083110765199360000L], [3, 0, 280244777828439527804321565297868800L], [0, 3, 280244777828439527804321565297868800L], [3, 1, -192457934618928299655108231168000L], [1, 3, -192457934618928299655108231168000L], [3, 2, 26898488858380731577417728000L], [2, 3, 26898488858380731577417728000L], [3, 3, -441206965512914835246100L], [4, 0, 1284733132841424456253440L], [0, 4, 1284733132841424456253440L], [4, 1, 128541798906828816384000L], [1, 4, 128541798906828816384000L], [4, 2, 383083609779811215375L], [2, 4, 383083609779811215375L], [4, 3, 107878928185336800], [3, 4, 107878928185336800], [4, 4, 1665999364600], [5, 0, 1963211489280], [0, 5, 1963211489280], [5, 1, -246683410950], [1, 5, -246683410950], [5, 2, 2028551200], [2, 5, 2028551200], [5, 3, -4550940], [3, 5, -4550940], [5, 4, 3720], [4, 5, 3720], [5, 5, -1], [6, 0, 1], [0, 6, 1]]
PHI7 = [[1, 1, 1221349308261453750252370983314569119494710493184000000000000000000L], [2, 0, 1464765079488386840337633731737402825128271675392000000000000000000L], [0, 2, 1464765079488386840337633731737402825128271675392000000000000000000L], [2, 1, -838538082798149465723818021032241603179964268544000000000000000L], [1, 2, -838538082798149465723818021032241603179964268544000000000000000L], [2, 2, -46666007311089950798495647194817495401448341504000000000000L], [3, 0, 13483958224762213714698012883865296529472356352000000000000000L], [0, 3, 13483958224762213714698012883865296529472356352000000000000000L], [3, 1, -129686683986501811181602978946723823397619367936000000000000L], [1, 3, -129686683986501811181602978946723823397619367936000000000000L], [3, 2, 72269669689202948469186346100000679630099972096000000000L], [2, 3, 72269669689202948469186346100000679630099972096000000000L], [3, 3, -5397554444336630396660447092290576395211374592000000L], [4, 0, 41375720005635744770247248526572116368162816000000000000L], [0, 4, 41375720005635744770247248526572116368162816000000000000L], [4, 1, 553293497305121712634517214392820316998991872000000000L], [1, 4, 553293497305121712634517214392820316998991872000000000L], [4, 2, 308718989330868920558541707287296140145328128000000L], [2, 4, 308718989330868920558541707287296140145328128000000L], [4, 3, 17972351380696034759035751584170427941396480000L], [3, 4, 17972351380696034759035751584170427941396480000L], [4, 4, 88037255060655710247136461896264828390470L], [5, 0, 42320664241971721884753245384947305283584000000000L], [0, 5, 42320664241971721884753245384947305283584000000000L], [5, 1, -40689839325168186578698294668599003971584000000L], [1, 5, -40689839325168186578698294668599003971584000000L], [5, 2, 11269804827778129625111322263056523132928000L], [2, 5, 11269804827778129625111322263056523132928000L], [5, 3, -901645312135695263877115693740562092344L], [3, 5, -901645312135695263877115693740562092344L], [5, 4, 14066810691825882583305340438456800L], [4, 5, 14066810691825882583305340438456800L], [5, 5, -18300817137706889881369818348L], [6, 0, 3643255017844740441130401792000000L], [0, 6, 3643255017844740441130401792000000L], [6, 1, 1038063543615451121419229773824000L], [1, 6, 1038063543615451121419229773824000L], [6, 2, 10685207605419433304631062899228L], [2, 6, 10685207605419433304631062899228L], [6, 3, 16125487429368412743622133040L], [3, 6, 16125487429368412743622133040L], [6, 4, 4460942463213898353207432L], [4, 6, 4460942463213898353207432L], [6, 5, 177089350028475373552L], [5, 6, 177089350028475373552L], [6, 6, 312598931380281], [7, 0, 104545516658688000], [0, 7, 104545516658688000], [7, 1, -34993297342013192], [1, 7, -34993297342013192], [7, 2, 720168419610864], [2, 7, 720168419610864], [7, 3, -4079701128594], [3, 7, -4079701128594], [7, 4, 9437674400], [4, 7, 9437674400], [7, 5, -10246068], [5, 7, -10246068], [7, 6, 5208], [6, 7, 5208], [7, 7, -1], [8, 0, 1], [0, 8, 1]]

PHI = [ [], [], PHI2, PHI3, PHI4, PHI5, [], PHI7 ]

TOOLONG = 60

q = 103
FF.<z> = FiniteField(q^2)
RR.<x> = PolynomialRing(FF)
print FF

def j_to_A_B(j):
    """ from the j invariant, generate the coefficients A, B for Weierstrass form """
    return j/(48*(1728 - j)), j/(864*(1728-j))
#    return 3*j*(1728 - j), 2*j*(1728-j)^2

def Phieval(N, i, j, m):
    """ eval PHI_N(i,j) mod m  """
    v = 0
    for monomial in PHI[N]:
        v = ( v + (i**monomial[0]) * (j**monomial[1]) * (monomial[2]%m)  )%m
    return v

def onesidephi(N, i):
    """ input, N, i, output the polynomial f(y) = PHI_N(i,y)  """
    f = 0
    for monomial in PHI[N]:
        f = f + (i**monomial[0])*monomial[2]* x^monomial[1]
    return f.roots()

def onesidephi_fun(N, i):
    """ input, N, i, output the polynomial f(y) = PHI_N(i,y)  """
    f = 0
    for monomial in PHI[N]:
        f = f + (i**monomial[0])*monomial[2]* x^monomial[1]
    return f

#onesidephi(2, 34)
#onesidephi(3, 57*z + 84)
#onesidephi(5, 57*z + 84)
#onesidephi(3, 34)
#onesidephi(5, 34)

def findiso():
    A0, B0 = j_to_A_B( FF(24) )
    E0 = EllipticCurve(FF, [0, 0, 0, A0, B0])
    print E0
    print "j-inv of E0: ", E0.j_invariant()
    print "Number of points on E0: ", E0.count_points(1)
    for a in range(q):
      for b in range(q):
        try:
            kerf = x - (a*z+b)
            phi = EllipticCurveIsogeny(E0, kerf)  # generate an isogeny from kernel polynomial
            Eprime = phi.codomain()
            print "the isogeny:", phi, "\n the kernel poly:", phi.kernel_polynomial(), "\n The rational maps ", phi.rational_maps()
            print "j-inv and the number-of-points of the image ", Eprime.j_invariant(), Eprime.count_points(1)
            phi_dual = phi.dual()
            print "the dual isogeny", phi_dual, "\n the kernel poly of the dual:", phi_dual.kernel_polynomial(), "\n The rational maps ", phi_dual.rational_maps()
            #for pos in listpoints:
                #print pos, pos.order(), phi(pos), phi(pos).order()

        except (ValueError):
            continue
#findiso()

def testsubgroup():
#    A0, B0 = j_to_A_B( FF(24) )
    E0 = EllipticCurve(FF, [0, 0, 0, 23, 7])
    print E0
    print "j-inv of E0: ", E0.j_invariant()
    print "Number of points on E0: ", E0.count_points(1)

    kerf = x + 25*z + 30
    phi = EllipticCurveIsogeny(E0, kerf)  # generate an isogeny from kernel polynomial
    Eprime = phi.codomain()
    print "the isogeny:", phi, "\n the kernel poly:", phi.kernel_polynomial(), "\n The rational maps ", phi.rational_maps()
    print "\n j-inv and the number-of-points of the image ", Eprime.j_invariant(), Eprime.count_points(1)
    phi_dual = phi.dual()
    print "the dual isogeny", phi_dual, "\n the kernel poly of the dual:", phi_dual.kernel_polynomial(), "\n The rational maps ", phi_dual.rational_maps()

    kerf2 = x + 100
    phi2 = EllipticCurveIsogeny(E0, kerf2)  # generate an isogeny from kernel polynomial
    print "the isogeny:", phi2, "\n the kernel poly:", phi2.kernel_polynomial(), "\n The rational maps ", phi2.rational_maps()

    listpoints =  Eprime.points()
    for pos in listpoints[41:80]:
        print pos, pos.order(), phi2( phi_dual(pos) ), phi2( phi_dual(pos) ).order()

testsubgroup()

def testsubgroup2():
    E0 = EllipticCurve(FF, [0, 0, 0, 7*z+5, 70*z+62])
    print E0
    print "\n j-inv of E0: ", E0.j_invariant()
    print "Number of points on E0: ", E0.count_points(1)
    listpoints =  E0.points()

    kerf = x - (98*z + 73)
    phi = EllipticCurveIsogeny(E0, kerf)  # generate an isogeny from kernel polynomial
    Eprime = phi.codomain()
    print "the isogeny:", phi, "\n the kernel poly:", phi.kernel_polynomial(), "\n The rational maps ", phi.rational_maps()
    print "\n j-inv and the number-of-points of the image ", Eprime.j_invariant(), Eprime.count_points(1)
#    phi_dual = phi.dual()
#    print "the dual isogeny", phi_dual, "\n the kernel poly of the dual:", phi_dual.kernel_polynomial(), "\n The rational maps ", phi_dual.rational_maps()
    for pos in listpoints[41:80]:
        print pos, pos.order(), phi(pos), phi(pos).order()

testsubgroup2()
